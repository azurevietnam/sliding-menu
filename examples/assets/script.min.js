if (typeof jQuery === 'undefined') {
    throw new Error('Sliding Menu requires jQuery');
}
(function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else {
        factory(jQuery);
    }
}(function ($) {
    'use strict';
    var slidingMenuUsedIds, SlidingMenu;

    slidingMenuUsedIds = [];

    SlidingMenu = function (element, options) {
        this.options = undefined;
        this.$el = undefined;
        this.currentPanel = undefined;

        this.init(element, options);
    };

    SlidingMenu.NAME = 'Sliding Menu';

    SlidingMenu.VERSION = '0.2.0';

    SlidingMenu.MAIN_CLASS = 'sliding-menu';

    SlidingMenu.PANEL_CLASS = SlidingMenu.MAIN_CLASS + '-panel';

    SlidingMenu.ICON_CLASS = SlidingMenu.MAIN_CLASS + '-icon';

    SlidingMenu.NAVIGATION_CLASS = SlidingMenu.MAIN_CLASS + '-nav';

    SlidingMenu.SET_ICON_CLASS = 'sm-set-icon';

    SlidingMenu.DEFAULTS = {
        // Adicional class for menu element
        className: '',
        // Default slide animation speed
        transitionDuration: 250,
        // A JSON object to build the menu from. Check our JSON example.
        dataJSON: false,
        // The link to the selected panel. Set to false to use the root panel
        initHref: false,
        // Label for the back button. Set to true to use the link's own label
        backLabel: 'Back'
    };

    SlidingMenu.prototype.init = function (element, options) {
        this.$el = $(element);

        if (this.$el.hasClass(SlidingMenu.MAIN_CLASS)) {
            return;
        }

        this.options = this.getOptions(options);
        this.events();
        this.process();
    };

    SlidingMenu.prototype.$ = function (selector) {
        return this.$el.find(selector);
    };

    SlidingMenu.prototype.events = function () {
        this.$el.on('click', 'a', $.proxy(this._onClickItem, this));
    };

    SlidingMenu.prototype._onClickItem = function (event) {
        var linker, targetPanel, movePanelTo;

        linker = $(event.currentTarget);

        if (linker.attr('data-id') !== undefined) {
            event.preventDefault();

            movePanelTo = linker.hasClass(SlidingMenu.MAIN_CLASS + '-back');
            targetPanel = this.$('.' + SlidingMenu.PANEL_CLASS + '[data-id="' + linker.attr('data-id') + '"]');

            if (this.currentPanel.attr('data-id') !== targetPanel.attr('data-id')) {
                this.currentPanel.stop(true, true).animate({
                    left: movePanelTo ? '100%' : '-100%'
                }, this.options.transitionDuration);

                targetPanel.stop(true, true).css('left', movePanelTo ? '-100%' : '100%').animate({
                    left: 0
                }, this.options.transitionDuration);

                this.$el.stop(true, true).animate({
                    height: targetPanel.height()
                }, this.options.transitionDuration);
            } else {
                targetPanel.css({
                    'left': 0
                });
                this.$el.height(targetPanel.height());
            }

            this.currentPanel = targetPanel;
        }

        if (!linker.hasClass(SlidingMenu.NAVIGATION_CLASS)) {
            this.$('li.active').removeClass('active');
            linker.closest('li').addClass('active');
        }
    };

    SlidingMenu.prototype.process = function () {
        var data;

        if (this.options.dataJSON) {
            data = this.processJSON(this.options.dataJSON);
        } else {
            data = this.processHTML();
        }

        this.setMenuContent(data);
    };

    SlidingMenu.prototype.setMenuContent = function (json) {
        var rootPanel;

        this.$el
            .empty()
            .addClass(SlidingMenu.MAIN_CLASS + ' ' + this.options.className);

        $(json).each($.proxy(function (index, item) {
            var panel;
            panel = $('<ul/>');

            if (item.root) {
                rootPanel = '.' + SlidingMenu.PANEL_CLASS + '[data-id="' + item.id + '"]';
            }

            // panel.attr('id', item.id);
            panel.attr('data-id', item.id);
            panel.addClass(SlidingMenu.PANEL_CLASS);

            $(item.children).each(function (index, item) {
                var li, link, icon;

                li = $('<li/>');

                if (item.separator !== true) {
                    link = $('<a/>');

                    link.attr({
                        'class': item.styleClass,
                        'href': item.href
                    });

                    if (item.panelId) {
                        link.attr('data-id', item.panelId);
                    }

                    link.text(item.label);

                    if (item.icon) {
                        icon = $('<i/>');
                        icon.addClass(SlidingMenu.ICON_CLASS + ' ' + item.icon);

                        link.prepend(icon);
                    }
                    li.append(link);
                } else {
                    li.addClass(SlidingMenu.MAIN_CLASS + '-separator');
                }

                panel.append(li);
            });

            this.$el.append(panel);
        }, this));

        rootPanel = this.$(rootPanel);

        rootPanel.addClass(SlidingMenu.PANEL_CLASS + '-root');
        this.currentPanel = rootPanel;

        if (this.options.initHref !== false) {
            this.changeVisiblePanel();
        } else {
            this.currentPanel.css('left', 0);
        }

        this.$el.height(this.currentPanel.height());
    };

    SlidingMenu.prototype.changeVisiblePanel = function () {
        var selectedLink, selectedPanel;

        selectedLink = this.getHyperlinkByHref(this.options.initHref)

        if (selectedLink.length !== 0) {
            selectedLink.closest('li').addClass('active');
            selectedPanel = this.getPanelByHref(this.options.initHref);
            this.currentPanel = selectedPanel;
        } else {
            console.warn(SlidingMenu.NAME + ': the link "' + this.options.initHref + '" does not exists. Please ' +
                'check the ' + (this.options.dataJSON !== false ? 'JSON object' : 'HTML structure') + '.');
        }

        this.options.initHref = false;
        this.currentPanel.css('left', 0);
    };

    SlidingMenu.prototype.processHTML = function (parentElem, parentObj, backLabel) {
        var root, panels;

        root = {
            id: SlidingMenu.PANEL_CLASS + '-' + this.getNewId(),
            root: parentElem ? false : true,
            children: []
        };
        panels = [];

        if (parentElem !== undefined) {
            root.children.push({
                panelId: parentObj.id,
                href: parentObj.id,
                label: this.options.backLabel === true ? backLabel : this.options.backLabel,
                styleClass: SlidingMenu.MAIN_CLASS + '-back ' + SlidingMenu.NAVIGATION_CLASS
            });
        } else {
            parentElem = this.$el.children('ul');
        }

        parentElem.children('li').each($.proxy(function (key, item) {
            var itemObj, itemLabel, panel, subPanel;

            item = $(item);

            if (!item.hasClass('separator')) {
                itemLabel = item.children('a');
                itemObj = {
                    icon: itemLabel.find('.' + SlidingMenu.SET_ICON_CLASS).attr('class') || undefined,
                    href: itemLabel.attr('href'),
                    label: this.trimWhiteSpaces(itemLabel.text())
                };

                if (itemObj.icon !== undefined) {
                    itemObj.icon = (itemObj.icon).replace(SlidingMenu.SET_ICON_CLASS, '');
                }

                subPanel = item.children('ul');
                if (subPanel.length !== 0) {
                    panel = this.processHTML(subPanel, root, itemObj.label);

                    itemObj.panelId = panel[0].id;
                    itemObj.styleClass = SlidingMenu.NAVIGATION_CLASS;
                    panels = panels.concat(panel);
                }
            } else {
                itemObj = {
                    separator: true
                };
            }

            root.children.push(itemObj);
        }, this));

        return [root].concat(panels);
    };

    SlidingMenu.prototype.processJSON = function (data, parent, backLabel) {
        var root, panels;

        root = {
            id: SlidingMenu.PANEL_CLASS + '-' + this.getNewId(),
            root: parent ? false : true,
            children: []
        };
        panels = [];

        if (parent) {
            root.children.push({
                panelId: parent.id,
                href: parent.id,
                label: this.options.backLabel === true ? backLabel : this.options.backLabel,
                styleClass: SlidingMenu.MAIN_CLASS + '-back ' + SlidingMenu.NAVIGATION_CLASS
            });
        }

        $(data).each($.proxy(function (index, item) {
            var panel;

            root.children.push(item);

            if (item.children) {
                panel = this.processJSON(item.children, root, item.label);
                item.panelId = panel[0].id;
                item.styleClass = SlidingMenu.NAVIGATION_CLASS;
                panels = panels.concat(panel);

                // Delete all childrens
                delete item.children;
            }
        }, this));

        return [root].concat(panels);
    };

    SlidingMenu.prototype.trimWhiteSpaces = function (text) {
        return text.trim();
    };

    SlidingMenu.prototype.getDefaults = function () {
        return SlidingMenu.DEFAULTS;
    };

    SlidingMenu.prototype.getOptions = function (options) {
        return $.extend({}, this.getDefaults(), this.$el.data(), options);
    };

    SlidingMenu.prototype.getHyperlinkByHref = function (href) {
        return this.$('a[href="' + href + '"]') || undefined;
    };

    SlidingMenu.prototype.getPanelByHref = function (href) {
        var linkElement = this.getHyperlinkByHref(href);
        return linkElement !== undefined ? linkElement.closest('ul') : undefined;
    };

    /**
     * Create a new ID
     * @return {Number} New id generated
     */
    SlidingMenu.prototype.getNewId = function () {
        var id;

        do {
            id = Math.random().toString(36).substring(2, 9);
        } while (slidingMenuUsedIds.indexOf(id) >= 0);

        slidingMenuUsedIds.push(id);

        return id;
    };

    // PLUGIN DEFINITION
    // =======================
    //
    function Plugin(option) {
        return this.each(function () {
            var $this, data, options;

            $this = $(this);
            data = $this.data('dc.slidingMenu');
            options = typeof option === 'object' && option;

            if (!data && /destroy|hide/.test(option)) {
                return;
            }
            if (!data) {
                $this.data('dc.slidingMenu', (data = new SlidingMenu(this, options)));
            }
            if (typeof option === 'string') {
                data[option]();
            }
        });
    }

    var old = $.fn.slidingMenu;
    $.fn.slidingMenu = Plugin;
    $.fn.slidingMenu.Constructor = SlidingMenu;

    // SLIDINGMENU NO CONFLICT
    // =================

    $.fn.slidingMenu.noConflict = function () {
        $.fn.slidingMenu = old;
        return this;
    };
}));

!function(a,b,c){"use strict";var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H;z={paneClass:"nano-pane",sliderClass:"nano-slider",contentClass:"nano-content",iOSNativeScrolling:!1,preventPageScrolling:!1,disableResize:!1,alwaysVisible:!1,flashDelay:1500,sliderMinHeight:20,sliderMaxHeight:null,documentContext:null,windowContext:null},u="scrollbar",t="scroll",l="mousedown",m="mouseenter",n="mousemove",p="mousewheel",o="mouseup",s="resize",h="drag",i="enter",w="up",r="panedown",f="DOMMouseScroll",g="down",x="wheel",j="keydown",k="keyup",v="touchmove",d="Microsoft Internet Explorer"===b.navigator.appName&&/msie 7./i.test(b.navigator.appVersion)&&b.ActiveXObject,e=null,D=b.requestAnimationFrame,y=b.cancelAnimationFrame,F=c.createElement("div").style,H=function(){var a,b,c,d,e,f;for(d=["t","webkitT","MozT","msT","OT"],a=e=0,f=d.length;f>e;a=++e)if(c=d[a],b=d[a]+"ransform",b in F)return d[a].substr(0,d[a].length-1);return!1}(),G=function(a){return H===!1?!1:""===H?a:H+a.charAt(0).toUpperCase()+a.substr(1)},E=G("transform"),B=E!==!1,A=function(){var a,b,d;return a=c.createElement("div"),b=a.style,b.position="absolute",b.width="100px",b.height="100px",b.overflow=t,b.top="-9999px",c.body.appendChild(a),d=a.offsetWidth-a.clientWidth,c.body.removeChild(a),d},C=function(){var a,c,d;return c=b.navigator.userAgent,(a=/(?=.+Mac OS X)(?=.+Firefox)/.test(c))?(d=/Firefox\/\d{2}\./.exec(c),d&&(d=d[0].replace(/\D+/g,"")),a&&+d>23):!1},q=function(){function j(d,f){this.el=d,this.options=f,e||(e=A()),this.$el=a(this.el),this.doc=a(this.options.documentContext||c),this.win=a(this.options.windowContext||b),this.body=this.doc.find("body"),this.$content=this.$el.children("."+f.contentClass),this.$content.attr("tabindex",this.options.tabIndex||0),this.content=this.$content[0],this.previousPosition=0,this.options.iOSNativeScrolling&&null!=this.el.style.WebkitOverflowScrolling?this.nativeScrolling():this.generate(),this.createEvents(),this.addEvents(),this.reset()}return j.prototype.preventScrolling=function(a,b){if(this.isActive)if(a.type===f)(b===g&&a.originalEvent.detail>0||b===w&&a.originalEvent.detail<0)&&a.preventDefault();else if(a.type===p){if(!a.originalEvent||!a.originalEvent.wheelDelta)return;(b===g&&a.originalEvent.wheelDelta<0||b===w&&a.originalEvent.wheelDelta>0)&&a.preventDefault()}},j.prototype.nativeScrolling=function(){this.$content.css({WebkitOverflowScrolling:"touch"}),this.iOSNativeScrolling=!0,this.isActive=!0},j.prototype.updateScrollValues=function(){var a,b;a=this.content,this.maxScrollTop=a.scrollHeight-a.clientHeight,this.prevScrollTop=this.contentScrollTop||0,this.contentScrollTop=a.scrollTop,b=this.contentScrollTop>this.previousPosition?"down":this.contentScrollTop<this.previousPosition?"up":"same",this.previousPosition=this.contentScrollTop,"same"!==b&&this.$el.trigger("update",{position:this.contentScrollTop,maximum:this.maxScrollTop,direction:b}),this.iOSNativeScrolling||(this.maxSliderTop=this.paneHeight-this.sliderHeight,this.sliderTop=0===this.maxScrollTop?0:this.contentScrollTop*this.maxSliderTop/this.maxScrollTop)},j.prototype.setOnScrollStyles=function(){var a;B?(a={},a[E]="translate(0, "+this.sliderTop+"px)"):a={top:this.sliderTop},D?(y&&this.scrollRAF&&y(this.scrollRAF),this.scrollRAF=D(function(b){return function(){return b.scrollRAF=null,b.slider.css(a)}}(this))):this.slider.css(a)},j.prototype.createEvents=function(){this.events={down:function(a){return function(b){return a.isBeingDragged=!0,a.offsetY=b.pageY-a.slider.offset().top,a.slider.is(b.target)||(a.offsetY=0),a.pane.addClass("active"),a.doc.bind(n,a.events[h]).bind(o,a.events[w]),a.body.bind(m,a.events[i]),!1}}(this),drag:function(a){return function(b){return a.sliderY=b.pageY-a.$el.offset().top-a.paneTop-(a.offsetY||.5*a.sliderHeight),a.scroll(),a.contentScrollTop>=a.maxScrollTop&&a.prevScrollTop!==a.maxScrollTop?a.$el.trigger("scrollend"):0===a.contentScrollTop&&0!==a.prevScrollTop&&a.$el.trigger("scrolltop"),!1}}(this),up:function(a){return function(){return a.isBeingDragged=!1,a.pane.removeClass("active"),a.doc.unbind(n,a.events[h]).unbind(o,a.events[w]),a.body.unbind(m,a.events[i]),!1}}(this),resize:function(a){return function(){a.reset()}}(this),panedown:function(a){return function(b){return a.sliderY=(b.offsetY||b.originalEvent.layerY)-.5*a.sliderHeight,a.scroll(),a.events.down(b),!1}}(this),scroll:function(a){return function(b){a.updateScrollValues(),a.isBeingDragged||(a.iOSNativeScrolling||(a.sliderY=a.sliderTop,a.setOnScrollStyles()),null!=b&&(a.contentScrollTop>=a.maxScrollTop?(a.options.preventPageScrolling&&a.preventScrolling(b,g),a.prevScrollTop!==a.maxScrollTop&&a.$el.trigger("scrollend")):0===a.contentScrollTop&&(a.options.preventPageScrolling&&a.preventScrolling(b,w),0!==a.prevScrollTop&&a.$el.trigger("scrolltop"))))}}(this),wheel:function(a){return function(b){var c;if(null!=b)return c=b.delta||b.wheelDelta||b.originalEvent&&b.originalEvent.wheelDelta||-b.detail||b.originalEvent&&-b.originalEvent.detail,c&&(a.sliderY+=-c/3),a.scroll(),!1}}(this),enter:function(a){return function(b){var c;if(a.isBeingDragged)return 1!==(b.buttons||b.which)?(c=a.events)[w].apply(c,arguments):void 0}}(this)}},j.prototype.addEvents=function(){var a;this.removeEvents(),a=this.events,this.options.disableResize||this.win.bind(s,a[s]),this.iOSNativeScrolling||(this.slider.bind(l,a[g]),this.pane.bind(l,a[r]).bind(""+p+" "+f,a[x])),this.$content.bind(""+t+" "+p+" "+f+" "+v,a[t])},j.prototype.removeEvents=function(){var a;a=this.events,this.win.unbind(s,a[s]),this.iOSNativeScrolling||(this.slider.unbind(),this.pane.unbind()),this.$content.unbind(""+t+" "+p+" "+f+" "+v,a[t])},j.prototype.generate=function(){var a,c,d,f,g,h,i;return f=this.options,h=f.paneClass,i=f.sliderClass,a=f.contentClass,(g=this.$el.children("."+h)).length||g.children("."+i).length||this.$el.append('<div class="'+h+'"><div class="'+i+'" /></div>'),this.pane=this.$el.children("."+h),this.slider=this.pane.find("."+i),0===e&&C()?(d=b.getComputedStyle(this.content,null).getPropertyValue("padding-right").replace(/[^0-9.]+/g,""),c={right:-14,paddingRight:+d+14}):e&&(c={right:-e},this.$el.addClass("has-scrollbar")),null!=c&&this.$content.css(c),this},j.prototype.restore=function(){this.stopped=!1,this.iOSNativeScrolling||this.pane.show(),this.addEvents()},j.prototype.reset=function(){var a,b,c,f,g,h,i,j,k,l,m,n;return this.iOSNativeScrolling?void(this.contentHeight=this.content.scrollHeight):(this.$el.find("."+this.options.paneClass).length||this.generate().stop(),this.stopped&&this.restore(),a=this.content,f=a.style,g=f.overflowY,d&&this.$content.css({height:this.$content.height()}),b=a.scrollHeight+e,l=parseInt(this.$el.css("max-height"),10),l>0&&(this.$el.height(""),this.$el.height(a.scrollHeight>l?l:a.scrollHeight)),i=this.pane.outerHeight(!1),k=parseInt(this.pane.css("top"),10),h=parseInt(this.pane.css("bottom"),10),j=i+k+h,n=Math.round(j/b*j),n<this.options.sliderMinHeight?n=this.options.sliderMinHeight:null!=this.options.sliderMaxHeight&&n>this.options.sliderMaxHeight&&(n=this.options.sliderMaxHeight),g===t&&f.overflowX!==t&&(n+=e),this.maxSliderTop=j-n,this.contentHeight=b,this.paneHeight=i,this.paneOuterHeight=j,this.sliderHeight=n,this.paneTop=k,this.slider.height(n),this.events.scroll(),this.pane.show(),this.isActive=!0,a.scrollHeight===a.clientHeight||this.pane.outerHeight(!0)>=a.scrollHeight&&g!==t?(this.pane.hide(),this.isActive=!1):this.el.clientHeight===a.scrollHeight&&g===t?this.slider.hide():this.slider.show(),this.pane.css({opacity:this.options.alwaysVisible?1:"",visibility:this.options.alwaysVisible?"visible":""}),c=this.$content.css("position"),("static"===c||"relative"===c)&&(m=parseInt(this.$content.css("right"),10),m&&this.$content.css({right:"",marginRight:m})),this)},j.prototype.scroll=function(){return this.isActive?(this.sliderY=Math.max(0,this.sliderY),this.sliderY=Math.min(this.maxSliderTop,this.sliderY),this.$content.scrollTop(this.maxScrollTop*this.sliderY/this.maxSliderTop),this.iOSNativeScrolling||(this.updateScrollValues(),this.setOnScrollStyles()),this):void 0},j.prototype.scrollBottom=function(a){return this.isActive?(this.$content.scrollTop(this.contentHeight-this.$content.height()-a).trigger(p),this.stop().restore(),this):void 0},j.prototype.scrollTop=function(a){return this.isActive?(this.$content.scrollTop(+a).trigger(p),this.stop().restore(),this):void 0},j.prototype.scrollTo=function(a){return this.isActive?(this.scrollTop(this.$el.find(a).get(0).offsetTop),this):void 0},j.prototype.stop=function(){return y&&this.scrollRAF&&(y(this.scrollRAF),this.scrollRAF=null),this.stopped=!0,this.removeEvents(),this.iOSNativeScrolling||this.pane.hide(),this},j.prototype.destroy=function(){return this.stopped||this.stop(),!this.iOSNativeScrolling&&this.pane.length&&this.pane.remove(),d&&this.$content.height(""),this.$content.removeAttr("tabindex"),this.$el.hasClass("has-scrollbar")&&(this.$el.removeClass("has-scrollbar"),this.$content.css({right:""})),this},j.prototype.flash=function(){return!this.iOSNativeScrolling&&this.isActive?(this.reset(),this.pane.addClass("flashed"),setTimeout(function(a){return function(){a.pane.removeClass("flashed")}}(this),this.options.flashDelay),this):void 0},j}(),a.fn.nanoScroller=function(b){return this.each(function(){var c,d;if((d=this.nanoscroller)||(c=a.extend({},z,b),this.nanoscroller=d=new q(this,c)),b&&"object"==typeof b){if(a.extend(d.options,b),null!=b.scrollBottom)return d.scrollBottom(b.scrollBottom);if(null!=b.scrollTop)return d.scrollTop(b.scrollTop);if(b.scrollTo)return d.scrollTo(b.scrollTo);if("bottom"===b.scroll)return d.scrollBottom(0);if("top"===b.scroll)return d.scrollTop(0);if(b.scroll&&b.scroll instanceof a)return d.scrollTo(b.scroll);if(b.stop)return d.stop();if(b.destroy)return d.destroy();if(b.flash)return d.flash()}return d.reset()})},a.fn.nanoScroller.Constructor=q}(jQuery,window,document);
/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript */
self = (typeof window !== 'undefined')
    ? window   // if in browser
    : (
        (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)
        ? self // if in worker
        : {}   // if in node js
    );

/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 * MIT license http://www.opensource.org/licenses/mit-license.php/
 * @author Lea Verou http://lea.verou.me
 */

var Prism = (function(){

// Private helper vars
var lang = /\blang(?:uage)?-(?!\*)(\w+)\b/i;

var _ = self.Prism = {
    util: {
        encode: function (tokens) {
            if (tokens instanceof Token) {
                return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);
            } else if (_.util.type(tokens) === 'Array') {
                return tokens.map(_.util.encode);
            } else {
                return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
            }
        },

        type: function (o) {
            return Object.prototype.toString.call(o).match(/\[object (\w+)\]/)[1];
        },

        // Deep clone a language definition (e.g. to extend it)
        clone: function (o) {
            var type = _.util.type(o);

            switch (type) {
                case 'Object':
                    var clone = {};

                    for (var key in o) {
                        if (o.hasOwnProperty(key)) {
                            clone[key] = _.util.clone(o[key]);
                        }
                    }

                    return clone;

                case 'Array':
                    return o.map(function(v) { return _.util.clone(v); });
            }

            return o;
        }
    },

    languages: {
        extend: function (id, redef) {
            var lang = _.util.clone(_.languages[id]);

            for (var key in redef) {
                lang[key] = redef[key];
            }

            return lang;
        },

        /**
         * Insert a token before another token in a language literal
         * As this needs to recreate the object (we cannot actually insert before keys in object literals),
         * we cannot just provide an object, we need anobject and a key.
         * @param inside The key (or language id) of the parent
         * @param before The key to insert before. If not provided, the function appends instead.
         * @param insert Object with the key/value pairs to insert
         * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.
         */
        insertBefore: function (inside, before, insert, root) {
            root = root || _.languages;
            var grammar = root[inside];

            if (arguments.length == 2) {
                insert = arguments[1];

                for (var newToken in insert) {
                    if (insert.hasOwnProperty(newToken)) {
                        grammar[newToken] = insert[newToken];
                    }
                }

                return grammar;
            }

            var ret = {};

            for (var token in grammar) {

                if (grammar.hasOwnProperty(token)) {

                    if (token == before) {

                        for (var newToken in insert) {

                            if (insert.hasOwnProperty(newToken)) {
                                ret[newToken] = insert[newToken];
                            }
                        }
                    }

                    ret[token] = grammar[token];
                }
            }

            // Update references in other language definitions
            _.languages.DFS(_.languages, function(key, value) {
                if (value === root[inside] && key != inside) {
                    this[key] = ret;
                }
            });

            return root[inside] = ret;
        },

        // Traverse a language definition with Depth First Search
        DFS: function(o, callback, type) {
            for (var i in o) {
                if (o.hasOwnProperty(i)) {
                    callback.call(o, i, o[i], type || i);

                    if (_.util.type(o[i]) === 'Object') {
                        _.languages.DFS(o[i], callback);
                    }
                    else if (_.util.type(o[i]) === 'Array') {
                        _.languages.DFS(o[i], callback, i);
                    }
                }
            }
        }
    },

    highlightAll: function(async, callback) {
        var elements = document.querySelectorAll('code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code');

        for (var i=0, element; element = elements[i++];) {
            _.highlightElement(element, async === true, callback);
        }
    },

    highlightElement: function(element, async, callback) {
        // Find language
        var language, grammar, parent = element;

        while (parent && !lang.test(parent.className)) {
            parent = parent.parentNode;
        }

        if (parent) {
            language = (parent.className.match(lang) || [,''])[1];
            grammar = _.languages[language];
        }

        if (!grammar) {
            return;
        }

        // Set language on the element, if not present
        element.className = element.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;

        // Set language on the parent, for styling
        parent = element.parentNode;

        if (/pre/i.test(parent.nodeName)) {
            parent.className = parent.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;
        }

        var code = element.textContent;

        if(!code) {
            return;
        }

        code = code.replace(/^(?:\r?\n|\r)/,'');

        var env = {
            element: element,
            language: language,
            grammar: grammar,
            code: code
        };

        _.hooks.run('before-highlight', env);

        if (async && self.Worker) {
            var worker = new Worker(_.filename);

            worker.onmessage = function(evt) {
                env.highlightedCode = Token.stringify(JSON.parse(evt.data), language);

                _.hooks.run('before-insert', env);

                env.element.innerHTML = env.highlightedCode;

                callback && callback.call(env.element);
                _.hooks.run('after-highlight', env);
            };

            worker.postMessage(JSON.stringify({
                language: env.language,
                code: env.code
            }));
        }
        else {
            env.highlightedCode = _.highlight(env.code, env.grammar, env.language);

            _.hooks.run('before-insert', env);

            env.element.innerHTML = env.highlightedCode;

            callback && callback.call(element);

            _.hooks.run('after-highlight', env);
        }
    },

    highlight: function (text, grammar, language) {
        var tokens = _.tokenize(text, grammar);
        return Token.stringify(_.util.encode(tokens), language);
    },

    tokenize: function(text, grammar, language) {
        var Token = _.Token;

        var strarr = [text];

        var rest = grammar.rest;

        if (rest) {
            for (var token in rest) {
                grammar[token] = rest[token];
            }

            delete grammar.rest;
        }

        tokenloop: for (var token in grammar) {
            if(!grammar.hasOwnProperty(token) || !grammar[token]) {
                continue;
            }

            var patterns = grammar[token];
            patterns = (_.util.type(patterns) === "Array") ? patterns : [patterns];

            for (var j = 0; j < patterns.length; ++j) {
                var pattern = patterns[j],
                    inside = pattern.inside,
                    lookbehind = !!pattern.lookbehind,
                    lookbehindLength = 0,
                    alias = pattern.alias;

                pattern = pattern.pattern || pattern;

                for (var i=0; i<strarr.length; i++) { // Don’t cache length as it changes during the loop

                    var str = strarr[i];

                    if (strarr.length > text.length) {
                        // Something went terribly wrong, ABORT, ABORT!
                        break tokenloop;
                    }

                    if (str instanceof Token) {
                        continue;
                    }

                    pattern.lastIndex = 0;

                    var match = pattern.exec(str);

                    if (match) {
                        if(lookbehind) {
                            lookbehindLength = match[1].length;
                        }

                        var from = match.index - 1 + lookbehindLength,
                            match = match[0].slice(lookbehindLength),
                            len = match.length,
                            to = from + len,
                            before = str.slice(0, from + 1),
                            after = str.slice(to + 1);

                        var args = [i, 1];

                        if (before) {
                            args.push(before);
                        }

                        var wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias);

                        args.push(wrapped);

                        if (after) {
                            args.push(after);
                        }

                        Array.prototype.splice.apply(strarr, args);
                    }
                }
            }
        }

        return strarr;
    },

    hooks: {
        all: {},

        add: function (name, callback) {
            var hooks = _.hooks.all;

            hooks[name] = hooks[name] || [];

            hooks[name].push(callback);
        },

        run: function (name, env) {
            var callbacks = _.hooks.all[name];

            if (!callbacks || !callbacks.length) {
                return;
            }

            for (var i=0, callback; callback = callbacks[i++];) {
                callback(env);
            }
        }
    }
};

var Token = _.Token = function(type, content, alias) {
    this.type = type;
    this.content = content;
    this.alias = alias;
};

Token.stringify = function(o, language, parent) {
    if (typeof o == 'string') {
        return o;
    }

    if (_.util.type(o) === 'Array') {
        return o.map(function(element) {
            return Token.stringify(element, language, o);
        }).join('');
    }

    var env = {
        type: o.type,
        content: Token.stringify(o.content, language, parent),
        tag: 'span',
        classes: ['token', o.type],
        attributes: {},
        language: language,
        parent: parent
    };

    if (env.type == 'comment') {
        env.attributes['spellcheck'] = 'true';
    }

    if (o.alias) {
        var aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];
        Array.prototype.push.apply(env.classes, aliases);
    }

    _.hooks.run('wrap', env);

    var attributes = '';

    for (var name in env.attributes) {
        attributes += name + '="' + (env.attributes[name] || '') + '"';
    }

    return '<' + env.tag + ' class="' + env.classes.join(' ') + '" ' + attributes + '>' + env.content + '</' + env.tag + '>';

};

if (!self.document) {
    if (!self.addEventListener) {
        // in Node.js
        return self.Prism;
    }
    // In worker
    self.addEventListener('message', function(evt) {
        var message = JSON.parse(evt.data),
            lang = message.language,
            code = message.code;

        self.postMessage(JSON.stringify(_.util.encode(_.tokenize(code, _.languages[lang]))));
        self.close();
    }, false);

    return self.Prism;
}

// Get current script and highlight
var script = document.getElementsByTagName('script');

script = script[script.length - 1];

if (script) {
    _.filename = script.src;

    if (document.addEventListener && !script.hasAttribute('data-manual')) {
        document.addEventListener('DOMContentLoaded', _.highlightAll);
    }
}

return self.Prism;

})();

if (typeof module !== 'undefined' && module.exports) {
    module.exports = Prism;
}
;
Prism.languages.markup = {
    'comment': /<!--[\w\W]*?-->/,
    'prolog': /<\?.+?\?>/,
    'doctype': /<!DOCTYPE.+?>/,
    'cdata': /<!\[CDATA\[[\w\W]*?]]>/i,
    'tag': {
        pattern: /<\/?[\w:-]+\s*(?:\s+[\w:-]+(?:=(?:("|')(\\?[\w\W])*?\1|[^\s'">=]+))?\s*)*\/?>/i,
        inside: {
            'tag': {
                pattern: /^<\/?[\w:-]+/i,
                inside: {
                    'punctuation': /^<\/?/,
                    'namespace': /^[\w-]+?:/
                }
            },
            'attr-value': {
                pattern: /=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i,
                inside: {
                    'punctuation': /=|>|"/
                }
            },
            'punctuation': /\/?>/,
            'attr-name': {
                pattern: /[\w:-]+/,
                inside: {
                    'namespace': /^[\w-]+?:/
                }
            }

        }
    },
    'entity': /&#?[\da-z]{1,8};/i
};

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function(env) {

    if (env.type === 'entity') {
        env.attributes['title'] = env.content.replace(/&amp;/, '&');
    }
});
;
Prism.languages.css = {
    'comment': /\/\*[\w\W]*?\*\//,
    'atrule': {
        pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i,
        inside: {
            'punctuation': /[;:]/
        }
    },
    'url': /url\((?:(["'])(\\\n|\\?.)*?\1|.*?)\)/i,
    'selector': /[^\{\}\s][^\{\};]*(?=\s*\{)/,
    'string': /("|')(\\\n|\\?.)*?\1/,
    'property': /(\b|\B)[\w-]+(?=\s*:)/i,
    'important': /\B!important\b/i,
    'punctuation': /[\{\};:]/,
    'function': /[-a-z0-9]+(?=\()/i
};

if (Prism.languages.markup) {
    Prism.languages.insertBefore('markup', 'tag', {
        'style': {
            pattern: /<style[\w\W]*?>[\w\W]*?<\/style>/i,
            inside: {
                'tag': {
                    pattern: /<style[\w\W]*?>|<\/style>/i,
                    inside: Prism.languages.markup.tag.inside
                },
                rest: Prism.languages.css
            },
            alias: 'language-css'
        }
    });

    Prism.languages.insertBefore('inside', 'attr-value', {
        'style-attr': {
            pattern: /\s*style=("|').*?\1/i,
            inside: {
                'attr-name': {
                    pattern: /^\s*style/i,
                    inside: Prism.languages.markup.tag.inside
                },
                'punctuation': /^\s*=\s*['"]|['"]\s*$/,
                'attr-value': {
                    pattern: /.+/i,
                    inside: Prism.languages.css
                }
            },
            alias: 'language-css'
        }
    }, Prism.languages.markup.tag);
};
Prism.languages.clike = {
    'comment': [
        {
            pattern: /(^|[^\\])\/\*[\w\W]*?\*\//,
            lookbehind: true
        },
        {
            pattern: /(^|[^\\:])\/\/.+/,
            lookbehind: true
        }
    ],
    'string': /("|')(\\\n|\\?.)*?\1/,
    'class-name': {
        pattern: /((?:(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i,
        lookbehind: true,
        inside: {
            punctuation: /(\.|\\)/
        }
    },
    'keyword': /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
    'boolean': /\b(true|false)\b/,
    'function': {
        pattern: /[a-z0-9_]+\(/i,
        inside: {
            punctuation: /\(/
        }
    },
    'number': /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/,
    'operator': /[-+]{1,2}|!|<=?|>=?|={1,3}|&{1,2}|\|?\||\?|\*|\/|~|\^|%/,
    'ignore': /&(lt|gt|amp);/i,
    'punctuation': /[{}[\];(),.:]/
};
;
Prism.languages.javascript = Prism.languages.extend('clike', {
    'keyword': /\b(break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|get|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|set|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\b/,
    'number': /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|-?Infinity)\b/,
    'function': /(?!\d)[a-z0-9_$]+(?=\()/i
});

Prism.languages.insertBefore('javascript', 'keyword', {
    'regex': {
        pattern: /(^|[^/])\/(?!\/)(\[.+?]|\\.|[^/\r\n])+\/[gim]{0,3}(?=\s*($|[\r\n,.;})]))/,
        lookbehind: true
    }
});

if (Prism.languages.markup) {
    Prism.languages.insertBefore('markup', 'tag', {
        'script': {
            pattern: /<script[\w\W]*?>[\w\W]*?<\/script>/i,
            inside: {
                'tag': {
                    pattern: /<script[\w\W]*?>|<\/script>/i,
                    inside: Prism.languages.markup.tag.inside
                },
                rest: Prism.languages.javascript
            },
            alias: 'language-javascript'
        }
    });
};

(function ($) {
    $.fn.cssMap = function (map) {
        var $element = this;
        $.each(map, function (property, value) {
            if (value instanceof Array) {
                for (var i = 0, len = value.length; i < len; i++) {
                    $element.css(property, value[i]);
                }
            } else {
                $element.css(property, value);
            }
        });
        return this;
    };
})(jQuery);
/*============================================================================
  Social Icon Buttons v1.0
  Author:
    Carson Shold | @cshold
    http://www.carsonshold.com
  MIT License
==============================================================================*/
window.CSbuttons = window.CSbuttons || {};

$(function () {
    CSbuttons.cache = {
        $shareButtons: $('.social-sharing')
    };
});

CSbuttons.init = function () {
    CSbuttons.socialSharing();
};

CSbuttons.socialSharing = function () {
    var $buttons = CSbuttons.cache.$shareButtons,
        $shareLinks = $buttons.find('a'),
        permalink = $buttons.attr('data-permalink');
        permalinkGitHub = $buttons.attr('data-permalink-github');

    // Get share stats from respective APIs
    var $fbLink = $('.share-facebook'),
        $twitLink = $('.share-twitter'),
        $pinLink = $('.share-pinterest'),
        $googleLink = $('.share-google');
        $githubLink = $('.share-github');

    if ($fbLink.length) {
        $.getJSON('https://graph.facebook.com/?id=' + permalink + '&callback=?', function (data) {
            if (data.shares) {
                $fbLink.find('.share-count').text(data.shares).addClass('is-loaded');
            } else {
                $fbLink.find('.share-count').remove();
            }
        });
    }

    if ($twitLink.length) {
        $.getJSON('https://cdn.api.twitter.com/1/urls/count.json?url=' + permalink + '&callback=?', function (data) {
            if (data.count > 0) {
                $twitLink.find('.share-count').text(data.count).addClass('is-loaded');
            } else {
                $twitLink.find('.share-count').remove();
            }
        });
    }

    if ($pinLink.length) {
        $.getJSON('https://api.pinterest.com/v1/urls/count.json?url=' + permalink + '&callback=?', function (data) {
            if (data.count > 0) {
                $pinLink.find('.share-count').text(data.count).addClass('is-loaded');
            } else {
                $pinLink.find('.share-count').remove();
            }
        });
    }

    if ($githubLink.length) {
        $.getJSON('https://api.github.com/repos/' + permalinkGitHub + '/stargazers', function (data) {
            if (data.length > 0) {
                $githubLink.find('.share-count').text(data.length).addClass('is-loaded');
            } else {
                $githubLink.find('.share-count').remove();
            }
        });
    }

    if ($googleLink.length) {
        // Can't currently get Google+ count with JS, so just pretend it loaded
        $googleLink.find('.share-count').addClass('is-loaded');
    }

    // Share popups
    $shareLinks.on('click', function (e) {
        var el = $(this),
            popup = el.attr('class').replace('-', '_'),
            link = el.attr('href'),
            w = 700,
            h = 400;

        if (!el.hasClass('share-github')) {
            e.preventDefault();

            // Set popup sizes
            switch (popup) {
            case 'share-twitter':
                h = 300;
                break;
            case 'share-fancy':
                w = 480;
                h = 720;
                break;
            case 'share-google':
                w = 500;
                break;
            }

            window.open(link, popup, 'width=' + w + ', height=' + h);
        }
    });
};

$(function () {
    window.CSbuttons.init();
});

/**
 * The Main Gradients module. Handles the loading
 * and shwing of gradient data
 *
 * @author Indrashish Ghosh (@_ighosh)
 */
window.SlidingMenuApp = window.SlidingMenuApp || {};

(function (window, document, $) {

    "use strict";

    SlidingMenuApp.UI = (function () {
        var gradients;
        var gradientIndex;
        var sections;
        var sectionIndex;
        var canvas = $("#canvas");

        function _loadSections() {
            sectionIndex = 0;
            sections = $(".canvas__container > section");
        }

        function _loadGradients() {
            gradients = [{
                "colour2": "#56B4D3",
                "colour1": "#348F50",
                "name": "Emerald Water"
            }, {
                "colour2": "#B5AC49",
                "colour1": "#3CA55C",
                "name": "Lemon Twist"
            }, {
                "colour2": "#DD2476",
                "colour1": "#FF512F",
                "name": "Bloody Mary"
            }, {
                "colour2": "#61045F",
                "colour1": "#AA076B",
                "name": "Aubergine"
            }, {
                "colour2": "#26D0CE",
                "colour1": "#1A2980",
                "name": "Aqua Marine"
            }, {
                "colour2": "#F09819",
                "colour1": "#FF512F",
                "name": "Sunrise"
            }, {
                "colour2": "#F8CDDA",
                "colour1": "#1D2B64",
                "name": "Purple Paradise"
            }, {
                "colour2": "#3CD3AD",
                "colour1": "#4CB8C4",
                "name": "Sea Weed"
            }, {
                "colour2": "#F7BB97",
                "colour1": "#DD5E89",
                "name": "Pinky"
            }, {
                "colour2": "#F45C43",
                "colour1": "#EB3349",
                "name": "Cherry"
            }, {
                "colour2": "#93F9B9",
                "colour1": "#1D976C",
                "name": "Mojito"
            }, {
                "colour2": "#FFC837",
                "colour1": "#FF8008",
                "name": "Juicy Orange"
            }, {
                "colour2": "#3A6073",
                "colour1": "#16222A",
                "name": "Mirage"
            }, {
                "colour2": "#928DAB",
                "colour1": "#1F1C2C",
                "name": "Steel Gray"
            }, {
                "colour2": "#516395",
                "colour1": "#614385",
                "name": "Kashmir"
            }, {
                "colour2": "#8E54E9",
                "colour1": "#4776E6",
                "name": "Electric Violet"
            }, {
                "colour2": "#85D8CE",
                "colour1": "#085078",
                "name": "Venice Blue"
            }, {
                "colour2": "#71B280",
                "colour1": "#134E5E",
                "name": "Moss"
            }, {
                "colour2": "#4389A2",
                "colour1": "#5C258D",
                "name": "Shroom Haze"
            }, {
                "colour2": "#D7DDE8",
                "colour1": "#757F9A",
                "name": "Mystic"
            }, {
                "colour2": "#414345",
                "colour1": "#232526",
                "name": "Midnight City"
            }, {
                "colour2": "#FFE47A",
                "colour1": "#3D7EAA",
                "name": "Opa"
            }, {
                "colour2": "#859398",
                "colour1": "#283048",
                "name": "Titanium"
            }, {
                "colour2": "#514A9D",
                "colour1": "#24C6DC",
                "name": "Mantle"
            }, {
                "colour2": "#4A569D",
                "colour1": "#DC2424",
                "name": "Dracula"
            }, {
                "colour2": "#FFEDBC",
                "colour1": "#ED4264",
                "name": "Peach"
            }, {
                "colour2": "#348AC7",
                "colour1": "#7474BF",
                "name": "Stellar"
            }, {
                "colour2": "#F3A183",
                "colour1": "#EC6F66",
                "name": "Bourbon"
            }, {
                "colour2": "#49a09d",
                "colour1": "#5f2c82",
                "name": "Calm Darya"
            }, {
                "colour2": "#480048",
                "colour1": "#C04848",
                "name": "Influenza"
            }, {
                "colour2": "#e65245",
                "colour1": "#e43a15",
                "name": "Shrimpy"
            }, {
                "colour2": "#727a17",
                "colour1": "#414d0b",
                "name": "Army"
            }, {
                "colour2": "#0ABFBC",
                "colour1": "#FC354C",
                "name": "Miaka"
            }, {
                "colour2": "#182848",
                "colour1": "#4b6cb7",
                "name": "Pinot Noir"
            }, {
                "colour2": "#ff5858",
                "colour1": "#f857a6",
                "name": "Day Tripper"
            }, {
                "colour2": "#7a2828",
                "colour1": "#a73737",
                "name": "Namn"
            }, {
                "colour2": "#cbad6d",
                "colour1": "#d53369",
                "name": "Blurry Beach"
            }, {
                "colour2": "#333333",
                "colour1": "#e9d362",
                "name": "Vasily"
            }, {
                "colour2": "#FFB88C",
                "colour1": "#DE6262",
                "name": "A Lost Memory"
            }, {
                "colour2": "#999966",
                "colour1": "#666600",
                "name": "Petrichor"
            }];

            setInterval(function () {
                canvas.trigger("gradientsLoaded");
            }, 60000);

            canvas.trigger("gradientsLoaded");
        }


        function _updateGradient() {
            var newGradient, from, to, gradientObject;

            newGradient = gradients[gradientIndex];
            from = newGradient.colour1;
            to = newGradient.colour2;

            gradientObject = {
                "background-color": from,
                "background-image": [
                    "-webkit-linear-gradient(-45deg, " + from + ", " + to + ")",
                    "-moz-linear-gradient(-45deg, " + from + ", " + to + ")",
                    "-ms-linear-gradient(-45deg, " + from + ", " + to + ")",
                    "-o-linear-gradient(-45deg, " + from + ", " + to + ")",
                    "linear-gradient(-45deg, " + from + ", " + to + ")"
                ]
            };

            $("body > .overlay").stop().animate({
                opacity: 0.75
            }, 300, function () {
                $(this).cssMap(gradientObject).animate({
                    opacity: 1
                }, {
                    duration: 300
                });
            });

        }


        function _updateSection(render) {

            if ($('.canvas__container > section').length < 4) {
                return;
            }

            $("footer .footer__gradient-btn").not(":eq(" + sectionIndex + ")").removeClass("active");
            $("footer .footer__gradient-btn").eq(sectionIndex).addClass("active");

            if (render !== false) {
                sections.not(":eq(" + sectionIndex + ")").css({
                    "display": "block",
                    "overflow": "hidden",
                    "height": "0",
                    "z-index": "1"
                });
                sections.eq(sectionIndex).css({
                    "display": "block",
                    "overflow": "hidden",
                    "height": "auto",
                    "z-index": "10"
                });

                $(".nano").nanoScroller({ scroll: 'top' });
            }
        }


        function _renderSection(direction) {

            // Making direction an optional variable
            direction = (typeof direction === "undefined") ? false : direction;

            if (direction === "up") {
                sectionIndex++;
                sectionIndex = (sectionIndex >= sections.length) ? 0 : sectionIndex;
            } else if (direction === "down") {
                sectionIndex--;
                sectionIndex = (sectionIndex <= -1) ? sections.length - 1 : sectionIndex;
            }

            _updateSection(direction);
        }


        function _bootstrap() {

            canvas.on("gradientsLoaded", function () {

                var randomIndex = Math.floor(Math.random() * ((gradients.length - 1) - 0 + 1)) + 0;
                gradientIndex = randomIndex;
                _updateGradient();

            });

        }


        function _bindEvents() {
            canvas.on("changeUp", function () {
                _renderSection("up");
            });

            canvas.on("changeDown", function () {
                _renderSection("down");
            });
        }


        function _clickSectionsEvents() {

            $("footer .footer__gradient-btn").on("click", function (ev) {
                sectionIndex = $(ev.currentTarget).index();
                _renderSection("click");
            });

        }


        function init() {
            _loadSections();
            _bootstrap();
            _bindEvents();
            _loadGradients();
            _clickSectionsEvents();
            _renderSection();

            $("footer .footer__gradient-btn").eq(sectionIndex).trigger('click');
        }


        function getGradients() {
            console.table(gradients);
        }


        return {
            init: init,
            getGradients: getGradients
        };

    })();

    // Initiating the events
    window.SlidingMenuApp.UI.init();

})(window, document, $);

window.SlidingMenuApp = window.SlidingMenuApp || {};

(function (window, document, $) {

    "use strict";

    SlidingMenuApp.Keys = (function () {

        var canvas = $("#canvas");

        function _bindEvents() {

            $(document).on("keydown", function (event) {
                switch (event.which) {
                case 37: // left
                    canvas.trigger("changeDown");
                    break;

                case 39: // right
                    canvas.trigger("changeUp");
                    break;

                default:
                    return; // exit this handler for other keys
                }
            });
        }

        function init() {
            _bindEvents();
        }

        return {
            init: init
        };

    })();

    // Initiating the events
    window.SlidingMenuApp.Keys.init();

})(window, document, $);

window.SlidingMenuApp = window.SlidingMenuApp || {};

(function (window, document, $) {

    "use strict";

    SlidingMenuApp.Nav = (function () {

        var canvas = $("#canvas");
        var nav = $("#navigation");

        function _bindEvents() {

            nav.on("click", "#navigation--prev", function () {
                canvas.trigger("changeDown");
            });

            nav.on("click", "#navigation--next", function () {
                canvas.trigger("changeUp");
            });
        }

        function init() {
            _bindEvents();
        }

        return {
            init: init
        };

    })();

    // Initiating the events
    window.SlidingMenuApp.Nav.init();

})(window, document, $);


$(document).ready(function () {

    var encodeCode = function(html, encode) {

        if (html === undefined) {
            return '';
        }

        var i = 0, testWhiteSpaces = function (string, pos) {
            var white = new RegExp(/^\s$/);
            return white.test(string.charAt(pos));
        }, whiteSpacesString;

        if (html.length !== 0 && html.charAt(0) != "\n") {
            html = "\n" + html + "\n";
        }

        do {
            // console.log("i", i, html.charAt(i), testWhiteSpaces(html, i));
            i++;
        } while (i < 40 && testWhiteSpaces(html, i));


        if (i > 0) {
            whiteSpacesString = new Array(i).join(' ');
            // console.log("FINAL i", i, "#"+whiteSpacesString+"#");
            html = html.replace(new RegExp("\n" + whiteSpacesString,"g"), "\n");
        }

        html = html.replace(/    /g, '  ');

        if (html.charAt(0) == "\n") {
            html = html.replace("\n","");
        }

        html = html.replace(/^\s*[\r\n]/gm, "");
        // console.log("HTML", html, html.length, html.charAt(html.length - 1));

        if (encode === true) {
            html = html.replace(/</g, '&lt;');
            html = html.replace(/>/g, '&gt;');
        }

        var lastChart;
        do {
            lastChart = html.charAt(html.length - 1);

            // console.log("remove", "*" + html.charAt(html.length - 1) + "*", html.length, lastChart != "\n", lastChart != " ");

            if (lastChart != "\n" && lastChart != " ") {
                break;
            }
            html = html.substring(0, html.length - 1);
        } while(html.length > 10);

        return html;
    };

    $(".sm-js-code-menu-json").html(encodeCode($("#sm-js-menu-json-example").html()));
    $(".sm-js-code-menu-html-js").html(encodeCode($("#sm-js-menu-html-example").html()));
    $(".sm-js-code-menu-html").html(encodeCode($("#menu").parent().html(), true));
    $(".sm-js-code-menu-html-icons-js").html(encodeCode($("#sm-js-menu-html-icons-example").html()));
    $(".sm-js-code-menu-html-icons").html(encodeCode($("#menuIcons").parent().html(), true));

    $(".sm-js-code-menu-json-html").html(encodeCode($("#menuJSON").parent().html(), true));
    $(".sm-js-code-menu-css").html(encodeCode($(".sm-js-code-menu-css").html()));

    $.each($(".language-css, .language-javascript, .language-markup"), function() {
        Prism.highlightElement($(this)[0]);
    });
});

$(document).ready(function () {

    // $(".canvas__container > section").slideUp(0).removeClass("hide");

    $("body").on("click", ".sliding-menu a:not(.sliding-menu-nav)", function (e) {
        e.preventDefault();

        // console.log("Go to: ", $(e.currentTarget).attr("href"));
    });
});



// Avoid `console` errors in browsers that lack a console.
(function() {
    var method;
    var noop = function () {};
    var methods = [
        "assert", "clear", "count", "debug", "dir", "dirxml", "error",
        "exception", "group", "groupCollapsed", "groupEnd", "info", "log",
        "markTimeline", "profile", "profileEnd", "table", "time", "timeEnd",
        "timeline", "timelineEnd", "timeStamp", "trace", "warn"
    ];
    var length = methods.length;
    var console = (window.console = window.console || {});

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
}());

console.log("=================================================================\n" +
            "Sliding Menu - a mobile-first example of using CSS and Javascript\n" +
            "to make a decent multi-level responsive sliding navigation menu.\n" +
            "=================================================================\n" +
            "A little project by www.twitter.com/DanielCardoso");
